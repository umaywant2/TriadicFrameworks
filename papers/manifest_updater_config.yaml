# 🧙 manifest_updater_config.yaml

# 🔮 Theme Detection
themes:
  Quantum: ["Quantum", "Particle", "Entanglement"]
  Health: ["Health", "Ultrasound", "Medical"]
  Music: ["Music", "Harmony", "Quadratic"]
  Engineering: ["Processor", "Firmware", "ARM", "x86"]
  Spectrum: ["Spectrum", "Light", "Dark"]
  Energy: ["Energy", "Fusion", "Wireless"]
  Symbolic: ["Symbolic", "Operator", "Formalization"]
  Planetary: ["Planet", "Saturn", "Time", "Ontology"]
  Elemental: ["Element", "Periodic", "Rare"]

# 🏅 Badge Suggestions
badges:
  Quantum: "Quantum Weaver"
  Health: "Healing Resonator"
  Music: "Harmonic Alchemist"
  Engineering: "Firmware Architect"
  Spectrum: "Spectral Flux Wizard"
  Energy: "Zero Point Seeker"
  Symbolic: "Symbolic Engineer"
  Planetary: "Planetary Resonator"
  Elemental: "Elemental Synthesist"

# 📬 Ping Settings
ping:
  enabled: true
  method: "webhook"  # Options: console, email, webhook
  message_template: "📬 Ping: Contributor of `{paper}` — validation status is `{status}`. Remixable: ✅"

  webhook:
    url: "https://your-webhook-endpoint.com/ping"
    method: "POST"
    headers:
      Content-Type: "application/json"
    payload_template: |
      {
        "username": "Manifest Updater",
        "avatar_url": "https://your-avatar-url.com/icon.png",
        "content": "📬 Ping: Contributor of `{paper}` — validation status is `{status}`. Theme: `{theme}`. Badge: `{badge}`. Remixable: ✅"
      }

# 🗂️ Manifest Settings
manifest_path: "./papers/papers_manifest.md"
changelog_path: "./papers/papers_manifest_changelog.md"
log_path: "./papers/manifest_updater_log.md"
scan_extensions: [".docx", ".pdf"]

def detect_theme(filename, config_path="manifest_updater_config.yaml"):
    import yaml
    with open(config_path, "r") as f:
        config = yaml.safe_load(f)
    for theme, keywords in config.get("themes", {}).items():
        if any(kw.lower() in filename.lower() for kw in keywords):
            return theme
    return "Unclassified"

def main():
    papers_dir = "papers"
    manifest_path = "papers_manifest.md"
    changelog_path = "papers_manifest_changelog.md"
    badges_path = "BADGES_EARNED.md"

    for filename in os.listdir(papers_dir):
        if filename.endswith(".docx") or filename.endswith(".pdf"):
            filepath = os.path.join(papers_dir, filename)
            equations_exists = os.path.exists(os.path.join(papers_dir, "equations.md"))
            reproducibility_exists = os.path.exists(os.path.join(papers_dir, "reproducibility.md"))
            theme = detect_theme(filename)
            suggested_badges = suggest_badges(filepath)

            update_manifest(manifest_path, filename, theme, equations_exists, reproducibility_exists)
            update_changelog(changelog_path, filename, theme)
            update_badges_earned(badges_path, filename, suggested_badges)

            print(f"🔔 Ping: {filename} processed with theme '{theme}' and badges {suggested_badges}")
